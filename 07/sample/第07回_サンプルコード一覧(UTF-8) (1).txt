========================================================================
// p02-1 : 白・赤・緑・青
//
   
#include <stdio.h>
#include <opencv/highgui.h>

void main()
{
   IplImage* img;
   
   // 画像サイズ 200×200, channels = 3 : カラー画像
   img = cvCreateImage(cvSize(200, 200), IPL_DEPTH_8U, 3);
   
   for (int y = 0; y < img->height; y++) {
      for (int x = 0; x < img->width; x++) {
         if (x < img->width/2) {
            if (y < img->height / 2) { // 白: (R,G,B)=(255,255,255)
               img->imageData[img->widthStep*y + x * 3 + 2] = 255;   // R
               img->imageData[img->widthStep*y + x * 3 + 1] = 255;   // G
               img->imageData[img->widthStep*y + x * 3 + 0] = 255;   // B
            }
            else {                    // 赤: (R,G,B)=(255,0,0)
               img->imageData[img->widthStep*y + x * 3 + 2] = 255;   // R
               img->imageData[img->widthStep*y + x * 3 + 1] = 0;     // G
               img->imageData[img->widthStep*y + x * 3 + 0] = 0;     // B
            }
         }
         else {
            if (y < img->height / 2) { // 緑: (R,G,B)=(0,255,0)
               img->imageData[img->widthStep*y + x * 3 + 2] = 0;     // R
               img->imageData[img->widthStep*y + x * 3 + 1] = 255;   // G
               img->imageData[img->widthStep*y + x * 3 + 0] = 0;     // B
            }
            else {                     // 青: (R,G,B)=(0,0,255)
               img->imageData[img->widthStep*y + x * 3 + 2] = 0;     // R
               img->imageData[img->widthStep*y + x * 3 + 1] = 0;     // G
               img->imageData[img->widthStep*y + x * 3 + 0] = 255;   // B
            }
         }
   
      }
   }
   cvNamedWindow("Color");
   cvShowImage("Color", img);
   cvSaveImage("color.bmp", img);
   
   
   cvWaitKey(0);
   cvDestroyAllWindows();
   cvReleaseImage(&img);
}



========================================================================
// p02-2 : 画像ファイルを読み込んで表示する
#include <stdio.h>
#include <opencv/highgui.h>
	
void main()
{
   IplImage* img;
   char filename[] = "Mandrill.bmp";
   
   // 画像データの読み込み
   if ((img = cvLoadImage(filename, CV_LOAD_IMAGE_UNCHANGED)) == NULL) {
      printf("画像ファイルの読み込みに失敗しました。\n");
      return;
   }
	
   cvNamedWindow("Image");
   cvShowImage("Image", img);
	
   printf("nChannels = %d\n", img->nChannels);
   if (img->nChannels == 3) {
      printf("---Color Image\n");
   }
   else if(img->nChannels == 1) {
      printf("---Grayscale Image\n");
   }

   cvWaitKey(0);
   cvDestroyAllWindows();
   cvReleaseImage(&img);
   return;
}




========================================================================
// p02-3 : 読み込んだ画像のGチャネルを0にした画像を表示
#include <stdio.h>
#include <opencv/highgui.h>

void main()
{
    IplImage* img;
    char filename[] = "Mandrill.bmp";

    // 画像データの読み込み
    if ((img = cvLoadImage(filename, CV_LOAD_IMAGE_UNCHANGED)) == NULL) {
        printf("画像ファイルの読み込みに失敗しました。\n");
        return;
    }

    cvNamedWindow("Image");
    cvShowImage("Image", img);

    printf("nChannels = %d\n", img->nChannels);


    // ～～カラー画像を表示するところまでは p02-2.cpp と同じ～～

    if (img->nChannels == 3) {
        printf("---Color Image\n");
    }
    else if (img->nChannels == 1) {
        printf("---Grayscale Image\n");
        return;  // ここだけ追加 (カラー画像じゃなかったら終了)
    }

    // Gチャネルを0に ----------------
    IplImage* img2;
    img2 = cvCreateImage(cvSize(img->width, img->height), img->depth, img->nChannels);  // 読み込んだ画像と同じサイズの画像を生成
    cvCopy(img, img2);            // 元画像をコピー
    for (int y = 0; y < img2->height; y++) {
        for (int x = 0; x < img2->width; x++) {
            img2->imageData[img2->widthStep * y + x * 3 + 1] = 0;
        }
    }
    cvNamedWindow("G=0");
    cvShowImage("G=0", img2);

    // ～～残りの後処理は p02-2.cpp とほぼ同様～～
    cvWaitKey(0);
    cvDestroyAllWindows();
    cvReleaseImage(&img2);   // ここだけ追加
    cvReleaseImage(&img);
    return;

}
